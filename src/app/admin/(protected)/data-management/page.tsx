"use client";

import { useState } from "react";
import { resetToDefaults, exportData, importData } from "@/lib/menuData";
import { adminMaintenance } from "@/lib/sdk";

export default function DataManagementPage() {
  const [importText, setImportText] = useState("");
  const [message, setMessage] = useState("");
  const [messageType, setMessageType] = useState<"success" | "error" | "">("");

  const showMessage = (text: string, type: "success" | "error") => {
    setMessage(text);
    setMessageType(type);
    setTimeout(() => {
      setMessage("");
      setMessageType("");
    }, 5000);
  };

  const handleReset = () => {
    if (
      confirm(
        "‚ö†Ô∏è X√≥a s·∫°ch d·ªØ li·ªáu LocalStorage (menu, categories, reviews)?\nThao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c."
      )
    ) {
      resetToDefaults();
      try {
        localStorage.removeItem("customerReviews");
      } catch {}
      showMessage("‚úÖ ƒê√£ x√≥a s·∫°ch d·ªØ li·ªáu LocalStorage!", "success");
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    }
  };

  // Firestore resets
  const confirmAndRun = async (msg: string, fn: () => Promise<unknown>) => {
    if (confirm(msg)) {
      try {
        await fn();
        showMessage("‚úÖ ƒê√£ reset th√†nh c√¥ng!", "success");
      } catch (e) {
        console.error(e);
        showMessage(
          "‚ùå Kh√¥ng th·ªÉ reset. Ki·ªÉm tra quy·ªÅn Firestore Rules.",
          "error"
        );
      }
    }
  };

  const resetAllFirestore = () =>
    confirmAndRun(
      "‚ö†Ô∏è Reset T·∫§T C·∫¢ d·ªØ li·ªáu tr√™n Firestore (menu, orders, reservations, feedback, bills, contacts)?",
      () => adminMaintenance.resetAll()
    );

  const resetMenuFirestore = () =>
    confirmAndRun("Reset Th·ª±c ƒë∆°n (menu) tr√™n Firestore?", () =>
      adminMaintenance.resetMenu()
    );
  const resetOrdersFirestore = () =>
    confirmAndRun("Reset ƒê∆°n h√†ng (orders) tr√™n Firestore?", () =>
      adminMaintenance.resetOrders()
    );
  const resetReservationsFirestore = () =>
    confirmAndRun("Reset ƒê∆°n ƒë·∫∑t b√†n (reservations) tr√™n Firestore?", () =>
      adminMaintenance.resetReservations()
    );
  const resetFeedbackFirestore = () =>
    confirmAndRun("Reset Feedback tr√™n Firestore?", () =>
      adminMaintenance.resetFeedback()
    );
  const resetContactsFirestore = () =>
    confirmAndRun("Reset Li√™n h·ªá tr√™n Firestore?", () =>
      adminMaintenance.resetContacts()
    );
  const resetRevenueFirestore = (range: "today" | "week" | "month" | "year") =>
    confirmAndRun(
      `Reset Doanh thu ${
        range === "today"
          ? "H√¥m nay"
          : range === "week"
          ? "Tu·∫ßn n√†y"
          : range === "month"
          ? "Th√°ng n√†y"
          : "NƒÉm n√†y"
      } tr√™n Firestore?`,
      () => adminMaintenance.resetRevenue(range)
    );

  const handleExport = () => {
    const data = exportData();
    const blob = new Blob([data], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `menu-data-${new Date().toISOString().split("T")[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    showMessage("‚úÖ ƒê√£ export d·ªØ li·ªáu th√†nh c√¥ng!", "success");
  };

  const handleImport = () => {
    if (!importText.trim()) {
      showMessage("‚ùå Vui l√≤ng nh·∫≠p d·ªØ li·ªáu JSON!", "error");
      return;
    }

    const success = importData(importText);
    if (success) {
      showMessage(
        "‚úÖ ƒê√£ import d·ªØ li·ªáu th√†nh c√¥ng! ƒêang t·∫£i l·∫°i trang...",
        "success"
      );
      setTimeout(() => {
        window.location.reload();
      }, 1500);
    } else {
      showMessage(
        "‚ùå Import th·∫•t b·∫°i! Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu JSON.",
        "error"
      );
    }
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        const text = event.target?.result as string;
        setImportText(text);
      };
      reader.readAsText(file);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 p-8">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            üóÑÔ∏è Qu·∫£n L√Ω D·ªØ Li·ªáu
          </h1>
          <p className="text-gray-600">
            Qu·∫£n l√Ω d·ªØ li·ªáu menu, danh m·ª•c - Export, Import, Reset
          </p>
        </div>

        {/* Message */}
        {message && (
          <div
            className={`mb-6 p-4 rounded-lg ${
              messageType === "success"
                ? "bg-green-100 text-green-800"
                : "bg-red-100 text-red-800"
            }`}
          >
            {message}
          </div>
        )}

        {/* Reset Section (LocalStorage) */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            üóëÔ∏è X√≥a D·ªØ Li·ªáu LocalStorage
          </h2>
          <p className="text-gray-600 mb-4">
            X√≥a t·∫•t c·∫£ d·ªØ li·ªáu menu, danh m·ª•c v√† feedback ƒë√£ l∆∞u trong tr√¨nh
            duy·ªát.
          </p>
          <button
            onClick={handleReset}
            className="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg font-semibold transition"
          >
            ‚ö†Ô∏è X√≥a s·∫°ch LocalStorage
          </button>
        </div>

        {/* Firestore Reset Section */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            üßπ Reset D·ªØ Li·ªáu (Firestore)
          </h2>
          <p className="text-gray-600 mb-4">
            Thao t√°c n√†y s·∫Ω x√≥a d·ªØ li·ªáu trong Firestore collections t∆∞∆°ng ·ª©ng.
          </p>
          <div className="grid gap-3 sm:grid-cols-2">
            <button
              onClick={resetAllFirestore}
              className="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-lg font-semibold"
            >
              Reset T·∫•t C·∫£
            </button>
            <button
              onClick={resetMenuFirestore}
              className="bg-purple-500 hover:bg-purple-600 text-white px-6 py-3 rounded-lg font-semibold"
            >
              Reset Th·ª±c ƒê∆°n
            </button>
            <button
              onClick={resetOrdersFirestore}
              className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold"
            >
              Reset ƒê∆°n H√†ng
            </button>
            <button
              onClick={resetReservationsFirestore}
              className="bg-amber-500 hover:bg-amber-600 text-white px-6 py-3 rounded-lg font-semibold"
            >
              Reset ƒê∆°n ƒê·∫∑t B√†n
            </button>
            <button
              onClick={resetFeedbackFirestore}
              className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-semibold"
            >
              Reset Feedback
            </button>
            <button
              onClick={resetContactsFirestore}
              className="bg-pink-500 hover:bg-pink-600 text-white px-6 py-3 rounded-lg font-semibold"
            >
              Reset Li√™n H·ªá
            </button>
          </div>
        </div>

        {/* Revenue Reset Section */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            üí∞ Reset Doanh Thu (Firestore)
          </h2>
          <p className="text-gray-600 mb-4">
            X√≥a d·ªØ li·ªáu h√≥a ƒë∆°n (bills) theo kho·∫£ng th·ªùi gian ƒë·ªÉ reset doanh
            thu.
          </p>
          <div className="grid gap-3 sm:grid-cols-2">
            <button
              onClick={() => resetRevenueFirestore("today")}
              className="bg-orange-500 hover:bg-orange-600 text-white px-6 py-3 rounded-lg font-semibold"
            >
              Reset Doanh Thu H√¥m Nay
            </button>
            <button
              onClick={() => resetRevenueFirestore("week")}
              className="bg-orange-500 hover:bg-orange-600 text-white px-6 py-3 rounded-lg font-semibold"
            >
              Reset Doanh Thu Tu·∫ßn N√†y
            </button>
            <button
              onClick={() => resetRevenueFirestore("month")}
              className="bg-orange-500 hover:bg-orange-600 text-white px-6 py-3 rounded-lg font-semibold"
            >
              Reset Doanh Thu Th√°ng N√†y
            </button>
            <button
              onClick={() => resetRevenueFirestore("year")}
              className="bg-orange-500 hover:bg-orange-600 text-white px-6 py-3 rounded-lg font-semibold"
            >
              Reset Doanh Thu NƒÉm N√†y
            </button>
          </div>
        </div>

        {/* Export Section */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            üì§ Export D·ªØ Li·ªáu
          </h2>
          <p className="text-gray-600 mb-4">
            T·∫£i xu·ªëng t·∫•t c·∫£ d·ªØ li·ªáu hi·ªán t·∫°i d∆∞·ªõi d·∫°ng file JSON
          </p>
          <button
            onClick={handleExport}
            className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold transition"
          >
            üì• T·∫£i xu·ªëng d·ªØ li·ªáu
          </button>
        </div>

        {/* Import Section */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            üì• Import D·ªØ Li·ªáu
          </h2>
          <p className="text-gray-600 mb-4">
            Nh·∫≠p d·ªØ li·ªáu t·ª´ file JSON ho·∫∑c paste tr·ª±c ti·∫øp
          </p>

          <div className="mb-4">
            <label
              htmlFor="fileUpload"
              className="block text-gray-700 font-semibold mb-2"
            >
              Ch·ªçn file JSON:
            </label>
            <input
              id="fileUpload"
              type="file"
              accept=".json"
              onChange={handleFileUpload}
              className="block w-full text-sm text-gray-500
                file:mr-4 file:py-2 file:px-4
                file:rounded-lg file:border-0
                file:text-sm file:font-semibold
                file:bg-purple-50 file:text-purple-700
                hover:file:bg-purple-100"
            />
          </div>

          <div className="mb-4">
            <label className="block text-gray-700 font-semibold mb-2">
              Ho·∫∑c paste d·ªØ li·ªáu JSON:
            </label>
            <textarea
              value={importText}
              onChange={(e) => setImportText(e.target.value)}
              placeholder='{"categories": [...], "menuItems": [...]}'
              className="w-full h-64 p-4 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none font-mono text-sm"
            />
          </div>

          <button
            onClick={handleImport}
            className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg font-semibold transition"
          >
            ‚¨ÜÔ∏è Import d·ªØ li·ªáu
          </button>
        </div>

        {/* Info */}
        <div className="mt-6 bg-yellow-50 border-l-4 border-yellow-500 p-4 rounded">
          <p className="text-yellow-800">
            <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u trong localStorage c·ªßa
            tr√¨nh duy·ªát. Khi t·∫Øt server v√† m·ªü l·∫°i, d·ªØ li·ªáu v·∫´n ƒë∆∞·ª£c gi·ªØ nguy√™n.
            Ch·ªâ khi b·∫°n x√≥a cache ho·∫∑c d√πng ch·∫ø ƒë·ªô ·∫©n danh th√¨ m·ªõi m·∫•t d·ªØ li·ªáu.
          </p>
        </div>
      </div>
    </div>
  );
}
