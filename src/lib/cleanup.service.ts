import { orderService } from "./order.service";
import { billService } from "./bill.service";
import { Timestamp } from "firebase/firestore";

/**
 * Service ƒë·ªÉ t·ª± ƒë·ªông d·ªçn d·∫πp d·ªØ li·ªáu c≈©
 * 
 * Quy t·∫Øc:
 * - ƒê∆°n h√†ng "cancelled" ho·∫∑c "test": X√≥a sau 7 ng√†y
 * - ƒê∆°n h√†ng "completed": Gi·ªØ 1 nƒÉm, sau ƒë√≥ archive
 * - Bills: Gi·ªØ 1 nƒÉm, sau ƒë√≥ t·∫°o b√°o c√°o t·ªïng h·ª£p r·ªìi archive
 */

class CleanupService {
  /**
   * X√≥a c√°c ƒë∆°n h√†ng ƒë√£ h·ªßy c≈© h∆°n 7 ng√†y
   */
  async cleanupCancelledOrders() {
    try {
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

      const cancelledOrders = await orderService.getAll([
        orderService.by('status', '==', 'cancelled'),
      ]);

      const toDelete = cancelledOrders.filter(order => {
        const createdAt = (order.createdAt as Timestamp)?.toDate?.() || new Date();
        return createdAt < sevenDaysAgo;
      });

      for (const order of toDelete) {
        if (order.id) {
          await orderService.delete(order.id);
          console.log(`Deleted cancelled order: ${order.orderCode}`);
        }
      }

      return { deleted: toDelete.length };
    } catch (error) {
      console.error('Error cleaning up cancelled orders:', error);
      throw error;
    }
  }

  /**
   * Archive c√°c ƒë∆°n h√†ng completed c≈© h∆°n 1 nƒÉm
   * Chuy·ªÉn sang collection "orders_archive"
   */
  async archiveOldCompletedOrders() {
    try {
      const oneYearAgo = new Date();
      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

      const completedOrders = await orderService.getAll([
        orderService.by('status', '==', 'completed'),
      ]);

      const toArchive = completedOrders.filter(order => {
        const createdAt = (order.createdAt as Timestamp)?.toDate?.() || new Date();
        return createdAt < oneYearAgo;
      });

      // TODO: Move to archive collection
      // For now, just log
      console.log(`${toArchive.length} orders ready for archive`);

      return { archived: toArchive.length };
    } catch (error) {
      console.error('Error archiving orders:', error);
      throw error;
    }
  }

  /**
   * T·∫°o b√°o c√°o th√°ng t·ª´ c√°c bills
   * L∆∞u v√†o collection "monthly_reports"
   */
  async createMonthlyReport(year: number, month: number) {
    try {
      const startDate = new Date(year, month - 1, 1);
      const endDate = new Date(year, month, 0, 23, 59, 59);

      const bills = await billService.getAll([]);
      
      const monthBills = bills.filter(bill => {
        const createdAt = (bill.createdAt as Timestamp)?.toDate?.() || new Date();
        return createdAt >= startDate && createdAt <= endDate;
      });

      const report = {
        year,
        month,
        totalRevenue: monthBills.reduce((sum, b) => sum + b.totalAmount, 0),
        totalOrders: monthBills.length,
        averageOrderValue: monthBills.length > 0 
          ? monthBills.reduce((sum, b) => sum + b.totalAmount, 0) / monthBills.length 
          : 0,
        createdAt: new Date(),
      };

      console.log(`Monthly report ${year}-${month}:`, report);
      return report;
    } catch (error) {
      console.error('Error creating monthly report:', error);
      throw error;
    }
  }

  /**
   * Ch·∫°y to√†n b·ªô cleanup tasks
   */
  async runCleanup() {
    console.log('üßπ Starting cleanup...');
    
    const results = {
      cancelledDeleted: 0,
      ordersArchived: 0,
    };

    try {
      // 1. X√≥a ƒë∆°n h·ªßy c≈©
      const cancelled = await this.cleanupCancelledOrders();
      results.cancelledDeleted = cancelled.deleted;

      // 2. Archive ƒë∆°n completed c≈©
      const archived = await this.archiveOldCompletedOrders();
      results.ordersArchived = archived.archived;

      console.log('‚úÖ Cleanup completed:', results);
      return results;
    } catch (error) {
      console.error('‚ùå Cleanup failed:', error);
      throw error;
    }
  }
}

export const cleanupService = new CleanupService();
